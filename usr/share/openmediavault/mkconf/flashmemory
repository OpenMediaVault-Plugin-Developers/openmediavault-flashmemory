#!/bin/sh
#
# Copyright (C) 2015 OpenMediaVault Plugin Developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

FOLDER2RAM_CONFIG="/etc/folder2ram/folder2ram.conf"
HOUSEKEEPER="/tmp/folder2ramhousekeeper"
XPATH="//services/flashmemory"

# Generate configuration only if the service is enabled.
if [ "$(omv_config_get "${XPATH}/enable")" != "1" ]; then
    exit 0
fi

# Info used from forum thread
# http://forums.openmediavault.org/index.php/Thread/6438-Tutorial-Experimental-Reducing-OMV-s-disk-writes-also-to-install-it-on-USB-flash/?pageNo=1
# now modified by bobafetthotmail to run with folder2ram, a safe and better system based on the info here
# https://www.debian-administration.org/article/661/A_transient_/var/log 

# create folder2ram config
cat <<'EOF' > ${FOLDER2RAM_CONFIG}
#############################
#folder2ram main config file#
#############################
#
#PROTIP: to make /var/lock or /tmp available as ram filesystems, 
#        it is preferable to set the variables RAMTMP, RAMLOCK
#        in /etc/default/tmpfs.
#
#FILE SYSTEM: does nothing, will be implemented in the future. (everything goes to tmpfs for now)
#
#OPTIONS: does nothing, will be implemented in the future.
#<file system>  <mount point>                 <options>
#tmpfs           /var/cache                 #this folder will be activated later after testing is completed
tmpfs           /var/log                    
tmpfs           /var/tmp                    
tmpfs           /var/lib/openmediavault/rrd 
tmpfs           /var/spool                  
tmpfs           /var/lib/rrdcached/         
tmpfs           /var/lib/monit              
#tmpfs           /var/lib/php5               keep_folder_structure   # folder2ram does not have an equivalent yet

#this file was automatically generated by openmediavault-flashmemory plugin
EOF

#sending a housekeeping script to /tmp so that we do the following modifications in a moment that won't upset apt-get
cat <<'EOF' > ${HOUSEKEEPER}
#!/bin/bash
#waiting for the package manager to finish its job.
    while fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do
    sleep 1
    done
#disabling apt disk cache so its folder in /var/cache/apt/whatever will stop filling up. Also saves additional writes.
    echo Dir::Cache ""; > /etc/apt/apt.conf.d/02nocache 
    echo Dir::Cache::archives ""; >> /etc/apt/apt.conf.d/02nocache
#disabling cron-apt package download by erasing the file asking for it.
    rm /etc/cron-apt/action.d/3-download
#deleting the packages already in the cache, because otherwise this is all wasted space in the tmpfs 
#and time wasted on startup and shutdown as all this stuff is compressed/extracted, especially for devices with weak processors
    rm /var/cache/apt/archives/*
    rm /var/cache/apt/archives/partial/*
    
#checking if fs2ram has been shut down by setup scripts
    while [[ ! -e /run/lock/fs2ramdisabled ]]; do
    sleep 1
    done
#removing fs2ram
    apt-get -y purge fs2ram
#script self-destruct, deletes this script from disk. technically optional, as /tmp content gets dumped anyway on startup.
    rm /tmp/folder2ramhousekeeper
exit 0
EOF

#making it executable
chmod +x ${HOUSEKEEPER}

#calling it up as another process, so this script can quit and installation of whatever else can continue.
bash ${HOUSEKEEPER}


#now we need to put fs2ram to sleep safely if it is still online


#checking if fs2ram is still there, if it isn't found the script ends here
if [ ! -f /sbin/fs2ram ]; then
exit 0;
fi

#################### UTILITY FUNCTIONS

read_fs2ram_mount_points() {
# this reads config file at a predetemined line and extracts mount point 
# $line_number must come from outside
# blank lines and commented lines are ignored, so line_number refers only to actual mount points

line_number=$1 

# remove blank and commented lines with sed, select only lines that have "keep_file_content" option,
# get variable form outside in awk, and use it to print line at $line_number
mount_point=$( sed '/^[[:space:]]*$/d' /etc/fs2ram/fs2ram.conf | sed '/^#/d' | sed -n '/keep_file_content/p' | awk -v line="$line_number" 'NR == line {print $2}' )

# checking if mount point variable is empty, and if it is returning a keyword
if [ "x$mount_point" != "x" ]; then 
echo "$mount_point";
else
echo "no_more_mount_points";
fi

}

########################## START OF SCRIPT ################################

#moving files to temp folders so we can shut down fs2ram safely

# initializing variables    
line_number=1 

echo "moving all tmpfs data to temp folders on system drive so we can get it back when fs2ram is powered down"

######################CHECKING IF THERE ARE STILL MOUNT POINTS

# calling another function (above) to fill the mount point at this line number
mount_point=$(read_fs2ram_mount_points "$line_number")

#########################################################

############BEGINNING MAIN LOOP::::::::::::::::::::::::::::::::::::::

until [ "$mount_point" = "no_more_mount_points" ] ;  do

# calling another function (above) to fill DIR, a directory variable at this line number
DIR=$(read_fs2ram_mount_points "$line_number")

################FUNCTION PAYLOAD#############

#this is the path of the temporary folders where we store things while powering down fs2ram
DIRPERM="/var/folder2ram/temp$DIR"

#making folder if not existing
[ -d "$DIRPERM" ] || mkdir -p "$DIRPERM"

#copy the contents of original folder in a temporary folder
cp -rfp "$DIR" -T "$DIRPERM"

####################################

# increasing line number
line_number=$((line_number+1))

######################CHECKING IF THERE ARE STILL MOUNT POINTS

# calling another function (above) to fill the mount point at this line number
mount_point=$(read_fs2ram_mount_points "$line_number")

#########################################################

###########ENDING OF MAIN LOOP::::::::::::::::::::::::::
done


############DEACTIVATING FS2RAM

# shuttins down fs2ram on all tmpfs
fs2ram unmount -a -f

#if it fails horribly it can be changed with yet another while cycle like the above, 
#reading and and unmounting manually all mount points of fs2ram 
#config file. I hope it won't be necessary.

######################################

############COPYING DATA BACK TO ORIGINAL FOLDERS:::::::::::::::

echo "copying the data back to original folders in permanent storage"

# initializing variables    
line_number=1

######################CHECKING IF THERE ARE STILL MOUNT POINTS

# calling another function (above) to fill the mount point at this line number
mount_point=$(read_fs2ram_mount_points "$line_number")

#########################################################

############BEGINNING MAIN LOOP::::::::::::::::::::::::::::::::::::::

until [ "$mount_point" = "no_more_mount_points" ] ;  do

# calling another function (above) to fill the mount point at this line number
mount_point=$(read_fs2ram_mount_points "$line_number")

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	# DIRPERM either does not exist or is empty?
	# making it anyway.
	# 
	[ -d "$DIRPERM" ] || mkdir -p "$DIRPERM" || return 2

	# If DIR does not exist?
	[ -d "$DIR" ] || return 2

	#checking if above went well
	if [ $? -eq 0 ]; then
		# move the data from temp folder to true folder in drive
		if cp -rfp "$DIRPERM" -T "$DIR"; then
			# Success!
			echo "$DIR synced"
		fi

	fi
	
# increasing line number
line_number=$((line_number+1))

################CHECKING IF THERE ARE STILL MOUNT POINTS

# calling another function (above) to fill the mount point at this line number
mount_point=$(read_fs2ram_mount_points "$line_number")

########################################################

##########ENDING OF MAIN LOOP:::::::::::::::::::::::::::::
done

########################MAKING SURE FS2RAM STAYS DOWN
# commenting out fs2ram config file so it will not come back
sed -i "" "s/^\([^#]\)/#\1/g" /etc/fs2ram/fs2ram.conf

#############SIGNALING READY TO HOUSEKEEPER
touch /run/lock/fs2ramdisabled


exit 0
