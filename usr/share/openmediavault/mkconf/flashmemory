#!/bin/sh
#
# Copyright (C) 2015 OpenMediaVault Plugin Developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

FOLDER2RAM_CONFIG="/etc/folder2ram/folder2ram.conf"
XPATH="//services/flashmemory"

# Generate configuration only if the service is enabled.
if [ "$(omv_config_get "${XPATH}/enable")" != "1" ]; then
    exit 0
fi

# Original plugin from info here:
# http://forums.openmediavault.org/index.php/Thread/6438-Tutorial-Experimental-Reducing-OMV-s-disk-writes-also-to-install-it-on-USB-flash/?pageNo=1
# now running with folder2ram instead, written based on the info here
# https://www.debian-administration.org/article/661/A_transient_/var/log 

# create folder2ram config
cat > ${FOLDER2RAM_CONFIG} <<'EOF'
#################################################################################
#folder2ram main config file, autogenerated by openmediavault flashmemory plugin#
#################################################################################
#
#PROTIP: to make /var/lock or /tmp available as ram filesystems, 
#        it is preferable to set the variables RAMTMP, RAMLOCK
#        in /etc/default/tmpfs.
#
#FILE SYSTEM: does nothing, will be implemented in the future. (everything goes to tmpfs for now)
#OPTIONS: does nothing, will be implemented in the future.
#
#<file system>  <mount point>                 <options>
#tmpfs           /var/cache                 #this folder will be activated later after testing is completed
tmpfs           /var/log                    
tmpfs           /var/tmp                    
tmpfs           /var/lib/openmediavault/rrd 
tmpfs           /var/spool                  
tmpfs           /var/lib/rrdcached/         
tmpfs           /var/lib/monit              
#tmpfs           /var/lib/php5               keep_folder_structure   # folder2ram does not have an equivalent yet
EOF

#since this script is called when activating first time the plugin, we can do away of the housekeeper script

#disabling apt disk cache so its folder in /var/cache/apt/whatever will stop filling up. Also saves additional writes.
    echo "Dir::Cache "";" > /etc/apt/apt.conf.d/02nocache 
    echo "Dir::Cache::archives "";" >> /etc/apt/apt.conf.d/02nocache
#disabling cron-apt package download by erasing the file asking for it.
    rm -f /etc/cron-apt/action.d/3-download
#deleting the packages already in the cache, because otherwise this is all wasted space in the tmpfs 
#and time wasted on startup and shutdown 
    rm -fr /var/cache/apt/archives/*
    mkdir -p /var/cache/apt/archives/partial


#now we need to put fs2ram to sleep safely if it is still online

#checking if fs2ram is online
if [ ! -f /sbin/fs2ram ]; then
#no fs2ram detected, the script ends here.
exit 0;
fi

# fs2ram detected, proceeding with the script

#################### UTILITY FUNCTIONS
read_fs2ram_mount_points() {
# this reads config file at a predetemined line and extracts mount point 
# $line_number must come from outside
# blank lines and commented lines are ignored, so line_number refers only to actual mount points
line_number=$1

# remove blank and commented lines with sed, select only lines that have "keep_file_content" option,
# get variable form outside in awk, and use it to print line at $line_number
mount_point=$( sed '/^[[:space:]]*$/d' /etc/fs2ram/fs2ram.conf | sed '/^#/d' | awk -v line="$line_number" 'NR == line {print $2}' )

# checking if mount point variable is empty, and if it is returning a keyword
if [ "x$mount_point" != "x" ]; then
echo "$mount_point";
else
echo "no_more_mount_points";
fi

}

read_folder2ram_mount_points() {
# this reads config file at a predetemined line and extracts mount point 
# $line_number must come from outside
# blank lines and commented lines are ignored, so line_number refers only to actual mount points
line_number="$1"

# remove blank and commented lines with sed,
# get variable form outside in awk, and use it to print line at $line_number
mount_point=$( sed '/^[[:space:]]*$/d' /etc/folder2ram/folder2ram.conf | sed '/^#/d' | awk -v line="$line_number" 'NR == line {print $2}' )

# checking if mount point variable is empty, and if it is returning a keyword
if [ "x$mount_point" != "x" ]; then
echo "$mount_point";
else
echo "no_more_mount_points";
fi

}

########################## START OF SCRIPT ################################

#moving files to temp folders so we can shut down fs2ram safely

# initializing variables    
line_number=1

######################CHECKING MOUNT POINTS BEFORE LOOP
# calling another function (above) to fill the mount point at this line number
mount_point=$(read_fs2ram_mount_points "$line_number")
#########################################################

############BEGIN UNTIL LOOP::::::::::::::::::::::::::::::::::::::
until [ "$mount_point" = "no_more_mount_points" ] ;  do
# calling another function (above) to fill DIR, a directory variable at this line number
DIR="$mount_point"

################PAYLOAD#############
#this is the path of the temporary folders where we store things while powering down fs2ram
DIRPERM="/var/folder2ram/temporary$DIR"

#making folder if not existing
mkdir -p "$DIRPERM"

#copy the contents of original folder in a temporary folder
cp -rfp "$DIR" -T "$DIRPERM"

#######checking if the same folder is also in folder2ram config, adding it otherwise.
line_number_folder2ram=1
mount_point_folder2ram=$(read_folder2ram_mount_points "$line_numver_folder2ram")
###################BEGIN UNTIL 2 LOOP::::::::::::
until [ "$mount_point_folder2ram" = "no_more_mount_points" ] ;  do
#initializing flag on 0
flag_present=0
#if mount point of cycle 1 does match the mount point of cycle 2 (that cycles through all folder2ram mount points)
if [ "$mount_point" = "$mount_point_folder2ram" ]; then
#raising flag
flag_present=1;
fi

# increasing line number
line_number_folder2ram=$((line_number+1))
# calling another function (above) to fill the mount point at this line number
mount_point_folder2ram=$(read_folder2ram_mount_points "$line_number_folder2ram")
#############END UNTIL 2 LOOP:::::::::::::::::
done

#if flag was NOT raised in cycle 2 the mount point was not matched, it has to be appended to the end of the config
if [ "$flag_present" -eq 0 ]; then
to_add=$(sed '/^[[:space:]]*$/d' /etc/fs2ram/fs2ram.conf | sed '/^#/d' | awk -v line="$line_number" 'NR == line {print $1, $2}') ;

echo "$to_add" >> ${FOLDER2RAM_CONFIG}

fi

####################################
#########INCREASING COUNTER AND LOADING VARIABLE FOR NEXT CHECK IN LOOP
# increasing line number
line_number=$((line_number+1))
# calling another function (above) to fill the mount point at this line number
mount_point=$(read_fs2ram_mount_points "$line_number")

###########ENDING UNTIL LOOP::::::::::::::::::::::::::
done


############DEACTIVATING FS2RAM

#making an initscript that does the leg work after reboot

folder2ram_keeper="/etc/init.d/folder2ram-keeper"

cat > "$folder2ram_keeper" <<'EOF'
#! /bin/sh

### BEGIN INIT INFO
# Provides:          folder2ram-remover
# Required-Start:    mountall
# Required-Stop:     umountfs
# X-Start-Before:    mountall-bootclean
# X-Stop-After:      rsyslog syslog-ng umountnfs
# Default-Start:     S
# Default-Stop:      0 6
# Short-Description: reloading data from temp folders.
# Description:       reloading data from temp folders created before shutting down fs2ram.
### END INIT INFO
. /lib/lsb/init-functions

PATH=/sbin:/bin
NAME=folder2ram-remover
DESC=folder2ram-remover

set -e

case "$1" in
    start)

#checking if fs2ram is online, if it isn't, this initscript self-destructs
if [ ! -f /sbin/fs2ram ]; then
	insserv -r "fs2ram-remover";
	rm -f "/etc/init.d/fs2ram-remover";
fi


#################### UTILITY FUNCTIONS

read_fs2ram_mount_points() {
# this reads config file at a predetemined line and extracts mount point 
# $line_number must come from outside
# blank lines and commented lines are ignored, so line_number refers only to actual mount points

line_number=$1

# remove blank and commented lines with sed,
# get variable form outside in awk, and use it to print line at $line_number
mount_point=$( sed '/^[[:space:]]*$/d' /etc/fs2ram/fs2ram.conf | sed '/^#/d' | awk -v line="$line_number" 'NR == line {print $2}' )

# checking if mount point variable is empty, and if it is returning a keyword
if [ "x$mount_point" != "x" ]; then
echo "$mount_point";
else
echo "no_more_mount_points";
fi

}

########################## START OF SCRIPT ################################
#####getting data back

echo "copying the data back to original folders in permanent storage"

# initializing variables
line_number=1

######################CHECKING IF THERE ARE STILL MOUNT POINTS

# calling another function (above) to fill the mount point at this line number
mount_point=$(read_fs2ram_mount_points "$line_number")

#########################################################

############BEGINNING MAIN LOOP::::::::::::::::::::::::::::::::::::::

until [ "$mount_point" = "no_more_mount_points" ] ;  do

# filling DIR and DIRPERM at this line number
DIR="$mount_point"
DIRPERM="/var/folder2ram/temporary$DIR"


	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	# If DIR does not exist?
	[ -d "$DIR" ] || return 2

	#checking if above went well
	if [ $? -eq 0 ]; then
		# move the data from temp folder to true folder in drive
		if cp -rfp "$DIRPERM" -T "$DIR"; then
			# Success!
			rm -fr "$DIRPERM";
		fi

	fi


# increasing line number
line_number=$((line_number+1))

################CHECKING IF THERE ARE STILL MOUNT POINTS

# calling another function (above) to fill the mount point at this line number
mount_point=$(read_fs2ram_mount_points "$line_number")

########################################################

#############END OF UNTIL LOOP:::::::::::::::::
done

exit
        ;;
    stop|restart|force-reload)
        # You probably don't want to do that before closing all the files opened on the concerned mountpoints
        echo "Error: argument '$1' not supported." >&2
        exit 3
        ;;
    *)
        N=/etc/init.d/$NAME
        echo "Usage: $N [start]" >&2
        exit 3
        ;;
esac

exit 0

EOF

#making it executable
chmod +x "$fs2ram_remover"

#updating initscripts
insserv "$fs2ram_remover"

#purging fs2ram
apt-get purge -y fs2ram 

reboot

exit 0
